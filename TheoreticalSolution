import numpy as np
import sympy as sym
import matplotlib.pyplot as plt
%matplotlib inline
sym.init_printing()

x0 = 0.5
dx0 = 0.0
fn = 0.4
zeta = 0.00542
z = 0.5
q = 1.0

cycle = 150
dt = 1/(fn*50)

x1,x2,x,t,f_n,zeta_ = sym.symbols('x_1 x_2 x t f_n zeta')
n,omega_n,omega_r = sym.symbols('n omega_n omega_r')   # intermediate variables
q_,omega_ = sym.symbols('q omega')      # forced vibration variables
x_0,dx_0 = sym.symbols('x_0 \dot{x_0}')  # initial condition 

A = sym.sqrt(x_0**2+((dx_0+n*x_0)/omega_r)**2)
phi_r = sym.atan(x_0*omega_r/(dx_0+n*x_0))
x1 = A*sym.exp(-n*t)*sym.sin(omega_r*t+phi_r)

B = q_/(sym.sqrt((omega_n**2-omega_**2)**2+4*n**2*omega_**2))
phi_ = sym.atan(2*n*omega_/(omega_n**2-omega_**2))
x2 = B*sym.sin(omega_*t-phi_)

x = x1 + x2
x = x.subs([(omega_r,sym.sqrt(omega_n**2-n**2)),(n,2*zeta_*omega_n),(omega_n,2*sym.pi*f_n)])
x = x.subs([(x_0,x0),(dx_0,dx0),(f_n,fn),(zeta_,zeta),(omega_,z*2*sym.pi*fn),(q_,q)])

f = sym.lambdify(t,x,'numpy')
t_s = np.arange(0,1/fn*cycle,dt)

plt.figure(figsize=(12,8))
plt.plot(t_s,f(t_s))
plt.title('简谐激振力下粘性阻尼系统的受迫振动的解析解与数值解比较',fontsize=20,loc = 'center')
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.grid(True)
plt.ylabel('$y$(m)',size=24,rotation=90)
plt.xlabel('$t(s)$',size=24)
plt.legend(['解析解'],fontsize='xx-large',loc='upper right',fancybox=False,shadow=True,edgecolor='black')
plt.savefig('UDFverification/z='+str(z)+'解析解.png',dpi=200)
data = np.stack([t_s,f(t_s)],axis=1)
np.savetxt('UDFverification/z='+str(z)+'解析解.dat',data,fmt='%f',delimiter=',')